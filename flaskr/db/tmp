# create db connection
def connect_db():
    # return sqlite3.connect(app.config['DATABASE']) #use tuple access datarow
    rv = sqlite3.connect(app.config['DATABASE'])
    rv.row_factory = sqlite3.Row
    return rv  # 创建一个简单的 SQLite 数据库的连接，并让它用 sqlite3.Row 表示数据库中的行。
               # 这使得我们可以通过字典而不是元组的形式访问行


def get_db():
    '''Opens a new database connetcion if there is none yet for the current application context'''
    if not hasattr(g, 'sqlite_db'):
        g.sqlite_db = connect_db()
    return g.sqlite_db


@app.teardown_appcontext
def close_db(err):
    '''
    teardown_appcontext() 标记的函数会在每次应用环境销毁时调用。这意味着什么？
    本质上，应用环境在请求传入前创建，每当请求结束时销毁。销毁有两种原因：
    一切正常（错误参数会是 None ）或发生异常，后者情况中，错误会被传递给销毁时函数。
    Close the database again at the end of the request
    '''
    if hasattr(g, 'sqlite_db'):
        g.sqlite_db.close()


def init_db():
    with app.app_context():
        db = get_db()
        with app.open_resource('schema.sql', mode='r') as f:
            db.cursor().executescript(f.read())
        db.commit()


@app.route('/')
def show_entries():
    '''
    视图函数会将条目作为字典传递给 show_entries.html 模板，并返回渲染结果
    '''
    cur=g.db.execute('select title,text from entries ORDER id DESC ')

if __name__ == '__main__':
    app.run()
